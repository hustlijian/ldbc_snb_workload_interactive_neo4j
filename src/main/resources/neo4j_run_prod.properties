#Print out the effective Neo4j configuration after startup.
#Default value: false
dump_configuration=true

#The type of cache to use for nodes and relationships. Note that the Neo4j Enterprise Edition has the additional 'gcr' cache type. 
#See the chapter on caches in the manual for more information.
#Default value: soft
#cache_type=soft
	#Provides optimal utilization of the available memory. Suitable for high performance traversal. 
	#May run into GC issues under high load if the frequently accessed parts of the graph does not fit in the cache.
	#This is the default cache implementation.
#cache_type=weak
	#Provides short life span for cached objects. Suitable for high throughput applications where a larger portion of 
	#the graph than what can fit into memory is frequently accessed.
#cache_type=strong
	#This cache will hold on to all data that gets loaded to never release it again. Provides good performance if your 
	#graph is small enough to fit in memory.
cache_type=hpc
	#Provides means of assigning a specific amount of memory to dedicate to caching loaded nodes and relationships. 
	#Small footprint and fast insert/lookup. Should be the best option for most scenarios. See below on how to configure it. 
	#Note that this option is only available in the Neo4j Enterprise Edition.
#cache_type=none

#Used to set the number of Cypher query execution plans that are cached.
#Default value: 100
query_cache_size=100

#Only allow read operations from this Neo4j instance. This mode still requires write access to the directory for lock purposes
#Default value: false
#read_only=false

#How many relationships to read at a time during iteration
#Default value: 100
#relationship_grab_size=100

###############################
######## MEMORY MAPPED ########
###############################

#Primitives		RAM			Heap	OS		Memory Mapping (Remainder)
#10M			2GB			512MB	1GB		1GB
#100M			8GB			4GB		2GB		2GB
#1B+			32GB		8GB		4GB		20GB
#1B+			128GB		16GB	8GB		104GB

#Tell Neo4j to use memory mapped buffers for accessing the native storage layer.
use_memory_mapped_buffers=true

#The size to allocate for a memory mapping pool to be shared between all stores.
all_stores_total_mapped_memory_size=104G

#	Assuming 
#
#	5.6G	neostore.nodestore.db				 2.5%
#	57G		neostore.relationshipstore.db		27.5%
#	58G		neostore.propertystore.db			28.0%
#	14M		neostore.propertystore.db.arrays	~0.0%
#	88G		neostore.propertystore.db.strings	40.0%

#The size to allocate for memory mapping the node store
neostore.nodestore.db.mapped_memory=6G

#The size to allocate for memory mapping the relationship store.
neostore.relationshipstore.db.mapped_memory=30G

#The size to allocate for memory mapping the property value store.
neostore.propertystore.db.mapped_memory=27G

#The size to allocate for memory mapping the array property store.
neostore.propertystore.db.arrays.mapped_memory=20M

#The size to allocate for memory mapping the string property store.
neostore.propertystore.db.strings.mapped_memory=40G

#The size to allocate for memory mapping the store for property key strings.
#neostore.propertystore.db.index.keys.mapped_memory=1M

#The size to allocate for memory mapping the store for property key indexes.
#neostore.propertystore.db.index.mapped_memory=1M

################################
######## Store Creation ########
################################

#Specifies the block size for storing labels exceeding in-lined space in node record. 
#This parameter is only honored when the store is created, otherwise it is ignored. 
#The default block size is 60 bytes, and the overhead of each block is the same as for string blocks, i.e., 8 bytes.
#Default value: 60
label_block_size=60

#Specifies the block size for storing arrays. This parameter is only honored when the store is created, otherwise it is ignored. 
#The default block size is 120 bytes, and the overhead of each block is the same as for string blocks, i.e., 8 bytes.
#Default value: 120
array_block_size=120

#Specifies the block size for storing strings. This parameter is only honored when the store is created, otherwise it is ignored. 
#Note that each character in a string occupies two bytes, meaning that a block size of 120 (the default size) 
#will hold a 60 character long string before overflowing into a second block. Also note that each block carries an overhead of 8 bytes. 
#This means that if the block size is 120, the size of the stored records will be 128 bytes.
#Default value: 120
string_block_size=120

#####################
######## GCR ########
#####################

#The amount of memory to use for the node cache (when using the 'gcr' cache)
#node_cache_size

#The amount of memory to use for the relationship cache (when using the 'gcr' cache).
#relationship_cache_size

#The fraction of the heap (1%-10%) to use for the base array in the node cache (when using the 'gcr' cache).
#Default value: 1.0
#node_cache_array_fraction=1.0

#The fraction of the heap (1%-10%) to use for the base array in the relationship cache (when using the 'gcr' cache).
#Default value: 1.0
#relationship_cache_array_fraction=1.0