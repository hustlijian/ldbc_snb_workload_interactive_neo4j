QUERY 1

MATCH (:Person {id:{1}})-[path:KNOWS*1..3]-(friend:Person)
WHERE friend.firstName = {2}
WITH friend, min(length(path)) AS distance
ORDER BY distance ASC, friend.lastName ASC, friend.id ASC
LIMIT {3}
MATCH (friend)-[:IS_LOCATED_IN]->(friendCity:City)
OPTIONAL MATCH (friend)-[studyAt:STUDY_AT]->(uni:University)-[:IS_LOCATED_IN]->(uniCity:City)
WITH friend, collect(CASE uni.name WHEN null THEN null ELSE [uni.name, studyAt.classYear, uniCity.name] END) AS unis, friendCity, distance
OPTIONAL MATCH (friend)-[worksAt:WORKS_AT]->(company:Company)-[:IS_LOCATED_IN]->(companyCountry:Country)
WITH friend, collect(CASE company.name WHEN null THEN null ELSE [company.name, worksAt.workFrom, companyCountry.name] END) AS companies, unis, friendCity, distance
RETURN friend.id AS id, friend.lastName AS lastName, distance, friend.birthday AS birthday, friend.creationDate AS creationDate, friend.gender AS gender, friend.browserUsed AS browser, friend.locationIP AS locationIp, friend.email AS emails, friend.languages AS languages, friendCity.name AS cityName, unis, companies
ORDER BY distance ASC, friend.lastName ASC, friend.id ASC
LIMIT {3}

QUERY 2

MATCH (:Person {id:{1}})-[:KNOWS]-(friend:Person)<-[:HAS_CREATOR]-(message)
WHERE message.creationDate <= {2} AND (message:Post OR message:Comment)
RETURN friend.id AS personId, friend.firstName AS personFirstName, friend.lastName AS personLastName, message.id AS messageId, message.content AS messageContent, message.creationDate AS messageDate
ORDER BY messageDate DESC, messageId ASC
LIMIT {3}

QUERY 3

MATCH (person:Person {id:{1}})-[:KNOWS*1..2]-(friend:Person)<-[:HAS_CREATOR]-(messageX)-[:IS_LOCATED_IN]->(countryX:Country)
WHERE not(person=friend) AND not((friend)-[:IS_LOCATED_IN]->()-[:IS_PART_OF]->(countryX)) AND countryX.name={2} AND messageX.creationDate>={4} AND messageX.creationDate<{5}
WITH friend, count(DISTINCT messageX) AS xCount
MATCH (friend)<-[:HAS_CREATOR]-(messageY)-[:IS_LOCATED_IN]->(countryY:Country)
WHERE countryY.name={3} AND not((friend)-[:IS_LOCATED_IN]->()-[:IS_PART_OF]->(countryY)) AND messageY.creationDate>={4} AND messageY.creationDate<{5}
WITH friend.id AS friendId, friend.firstName AS friendFirstName, friend.lastName AS friendLastName , xCount, count(DISTINCT messageY) AS yCount
RETURN friendId, friendFirstName, friendLastName, xCount, yCount, xCount + yCount AS xyCount
ORDER BY xyCount DESC, friendId ASC
LIMIT {6}

QUERY 4

MATCH (person:Person {id:{1}})-[:KNOWS]-(:Person)<-[:HAS_CREATOR]-(post:Post)-[HAS_TAG]->(tag:Tag)
WHERE post.creationDate >= {2} AND post.creationDate < {3}
OPTIONAL MATCH (tag)<-[:HAS_TAG]-(oldPost:Post)
WHERE oldPost.creationDate < {2}
WITH tag, post, length(collect(oldPost)) AS oldPostCount
WHERE oldPostCount=0
RETURN tag.name AS tagName, length(collect(post)) AS postCount
ORDER BY postCount DESC, tagName ASC
LIMIT {4}

QUERY 5

MATCH (person:Person {id:{1}})-[:KNOWS*1..2]-(friend:Person)<-[membership:HAS_MEMBER]-(forum:Forum)
WHERE membership.joinDate>{2} AND not(person=friend)
WITH DISTINCT friend, forum
OPTIONAL MATCH (friend)<-[:HAS_CREATOR]-(post:Post)<-[:CONTAINER_OF]-(forum)
WITH forum, count(post) AS postCount
RETURN forum.title AS forumName, postCount
ORDER BY postCount DESC, forum.id ASC
LIMIT {3}

QUERY 6

MATCH (person:Person {id:{1}})-[:KNOWS*1..2]-(friend:Person)<-[:HAS_CREATOR]-(friendPost:Post)-[:HAS_TAG]->(knownTag:Tag {name:{2}})
WHERE not(person=friend)
MATCH (friendPost)-[:HAS_TAG]->(commonTag:Tag)
WHERE not(commonTag=knownTag)
WITH DISTINCT commonTag, knownTag, friend
MATCH (commonTag)<-[:HAS_TAG]-(commonPost:Post)-[:HAS_TAG]->(knownTag)
WHERE (commonPost)-[:HAS_CREATOR]->(friend)
RETURN commonTag.name AS tagName, count(commonPost) AS postCount
ORDER BY postCount DESC, tagName ASC
LIMIT {3}

QUERY 7

MATCH (person:Person {id:{1}})<-[:HAS_CREATOR]-(message)<-[like:LIKES]-(liker:Person)
WITH liker, message, like.creationDate AS likeTime, person
ORDER BY likeTime DESC, message.id ASC
WITH liker, head(collect({msg: message, likeTime: likeTime})) AS latestLike, person
RETURN liker.id AS personId, liker.firstName AS personFirstName, liker.lastName AS personLastName, latestLike.likeTime AS likeTime, not((liker)-[:KNOWS]-(person)) AS isNew, latestLike.msg.id AS messageId, latestLike.msg.content AS messageContent, latestLike.likeTime - latestLike.msg.creationDate AS latencyAsMilli
ORDER BY likeTime DESC, personId ASC
LIMIT {2}

QUERY 8

MATCH (start:Person {id:{1}})<-[:HAS_CREATOR]-()<-[:REPLY_OF]-(comment:Comment)-[:HAS_CREATOR]->(person:Person)
RETURN person.id AS personId, person.firstName AS personFirstName, person.lastName AS personLastName, comment.id AS commentId, comment.creationDate AS commentCreationDate, comment.content AS commentContent
ORDER BY commentCreationDate DESC, commentId ASC
LIMIT {2}

QUERY 9

MATCH (:Person {id:{1}})-[:KNOWS*1..2]-(friend:Person)<-[:HAS_CREATOR]-(message)
WHERE message.creationDate < {2}
RETURN DISTINCT message.id AS messageId, message.content AS messageContent, message.creationDate AS messageCreationDate, friend.id AS personId, friend.firstName AS personFirstName, friend.lastName AS personLastName
ORDER BY message.creationDate DESC, message.id ASC
LIMIT {3}

QUERY 10

MATCH (person:Person {id:{1}})-[:KNOWS*2..2]-(friend:Person)-[:IS_LOCATED_IN]->(city:City)
WHERE ((friend.birthday_month = {2} AND friend.birthday_day >= 21) OR (friend.birthday_month = ({2}+1)%12 AND friend.birthday_day < 22)) AND not(friend=person) AND not((friend)-[:KNOWS]-(person))
WITH DISTINCT friend, city, person
OPTIONAL MATCH (friend)<-[:HAS_CREATOR]-(post:Post)
WITH friend, city, collect(post) AS posts, person
WITH friend, city, length(posts) AS postCount, length([p IN posts WHERE (p)-[:HAS_TAG]->(:Tag)<-[:HAS_INTEREST]-(person)]) AS commonPostCount
RETURN friend.id AS personId, friend.firstName AS personFirstName, friend.lastName AS personLastName, friend.gender AS personGender, city.name AS personCityName, commonPostCount - (postCount - commonPostCount) AS commonInterestScore
ORDER BY commonInterestScore DESC, personId ASC
LIMIT {4}

QUERY 11

MATCH (person:Person {id:{1}})-[:KNOWS*1..2]-(friend:Person)
WHERE not(person=friend)
WITH DISTINCT friend
MATCH (friend)-[worksAt:WORKS_AT]->(company:Company)-[:IS_LOCATED_IN]->(:Country {name:{3}})
WHERE worksAt.workFrom < {2}
RETURN friend.id AS friendId, friend.firstName AS friendFirstName, friend.lastName AS friendLastName, worksAt.workFrom AS workFromYear, company.name AS companyName
ORDER BY workFromYear ASC, friendId ASC, companyName DESC
LIMIT {4}

QUERY 12

MATCH (:Person {id:{1}})-[:KNOWS]-(friend:Person)
OPTIONAL MATCH (friend)<-[:HAS_CREATOR]-(comment:Comment)-[:REPLY_OF]->(:Post)-[:HAS_TAG]->(tag:Tag)-[:HAS_TYPE]->(tagClass:TagClass)-[:IS_SUBCLASS_OF*0..]->(baseTagClass:TagClass)
WHERE tagClass.name = {2} OR baseTagClass.name = {2}
RETURN friend.id AS friendId, friend.firstName AS friendFirstName, friend.lastName AS friendLastName, collect(DISTINCT tag.name) AS tagNames, count(DISTINCT comment) AS count
ORDER BY count DESC, friendId ASC
LIMIT {3}

QUERY 13

MATCH (person1:Person {id:{1}}), (person2:Person {id:{2}})
OPTIONAL MATCH path = shortestPath((person1)-[:KNOWS]-(person2))
RETURN CASE path IS NULL WHEN true THEN -1 ELSE length(path) END AS pathLength

QUERY 14

MATCH path = allShortestPaths((person1:Person {id:{1}})-[:KNOWS]-(person2:Person {id:{2}}))
WITH nodes(path) AS pathNodes
RETURN
 extract(n IN pathNodes | n.id) AS pathNodeIds,
 reduce(weight=0.0, idx IN range(1,size(pathNodes)-1) |
    extract(prev IN [pathNodes[idx-1]] |
        extract(curr IN [pathNodes[idx]] |
            weight +
            length((curr)<-[:HAS_CREATOR]-(:Comment)-[:REPLY_OF]->(:Post)-[:HAS_CREATOR]->(prev))*1.0 +
            length((prev)<-[:HAS_CREATOR]-(:Comment)-[:REPLY_OF]->(:Post)-[:HAS_CREATOR]->(curr))*1.0 +
            length((prev)-[:HAS_CREATOR]-(:Comment)-[:REPLY_OF]-(:Comment)-[:HAS_CREATOR]-(curr))*0.5
        )
    )[0][0]
 ) AS weight
ORDER BY weight DESC